# ----------------------------------------------------------------
# ステージ1: ビルド環境 (builder)
# ----------------------------------------------------------------
# Goの公式イメージをビルド環境として使用します。
# ビルドに必要なツールチェーンが含まれています。
FROM golang:1.22-alpine AS builder

# アプリケーションの作業ディレクトリを設定
WORKDIR /app

# Goモジュールの依存関係をキャッシュするために、先にgo.modとgo.sumをコピーします。
# これにより、ソースコードが変更されても、依存関係が変わらなければキャッシュが利用され、ビルドが高速化します。
COPY go.mod go.sum ./
RUN go mod download

# アプリケーションのソースコードをすべてコピー
COPY . .

# アプリケーションをビルドします。
# -o /bin/server: 出力される実行可能ファイルの名前と場所を指定します。
# CGO_ENABLED=0: C言語のライブラリに依存しない静的リンクバイナリを生成します。
#   これにより、scratchのような最小イメージでも動作しやすくなります。
# -ldflags "-w -s": デバッグ情報を削除し、バイナリサイズを削減します。
RUN CGO_ENABLED=0 go build -ldflags="-w -s" -o /bin/server ./cmd/server

# ----------------------------------------------------------------
# ステージ2: 本番環境 (production)
# ----------------------------------------------------------------
FROM alpine:latest

RUN apk add --no-cache tzdata ca-certificates

# タイムゾーン情報を日本のものに設定
ENV TZ=Asia/Tokyo

# builderステージから、コンパイル済みのアプリケーションバイナリのみをコピーします。
COPY --from=builder /bin/server /bin/server

# アプリケーションが使用するポートを公開します。
# compose.ymlやクラウド環境で実際にマッピングされるポートとは別で、
# あくまでコンテナ内部でリッスンするポート番号です。
EXPOSE 8080

# コンテナ起動時に実行されるコマンドを指定します。
# これにより、コンテナはアプリケーションサーバーとして起動します。
CMD ["/bin/server"]